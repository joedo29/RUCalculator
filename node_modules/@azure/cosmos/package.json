{
  "_from": "@azure/cosmos@^2.1.5",
  "_id": "@azure/cosmos@2.1.5",
  "_inBundle": false,
  "_integrity": "sha512-qkGekxOgwZqZ+1oaHmYSvDiMDcoJt6S9PPHmfaGzbgZcSdYrLolcoLTg/CyDS50wmBSh2OBrsKcE6nXAnVLIyg==",
  "_location": "/@azure/cosmos",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@azure%2fcosmos",
    "fetchSpec": "^2.1.5",
    "name": "@azure/cosmos",
    "raw": "@azure/cosmos@^2.1.5",
    "rawSpec": "^2.1.5",
    "registry": true,
    "saveSpec": null,
    "scope": "@azure",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@azure/cosmos/-/cosmos-2.1.5.tgz",
  "_shasum": "32e1ab833c7d4326a904859b08a7726f13419672",
  "_spec": "@azure/cosmos@^2.1.5",
  "_where": "/home/nfsrun/RUCalculator",
  "author": {
    "name": "Microsoft Corporation"
  },
  "bugs": {
    "url": "https://github.com/Azure/azure-cosmos-js/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "binary-search-bounds": "2.0.3",
    "create-hmac": "^1.1.7",
    "priorityqueuejs": "1.0.0",
    "semaphore": "1.0.5",
    "stream-http": "^2.8.3",
    "tslib": "^1.9.3",
    "tunnel": "0.0.5"
  },
  "deprecated": false,
  "description": "Azure Cosmos DB Service Node.js SDK for SQL API",
  "devDependencies": {
    "@types/mocha": "^5.2.5",
    "@types/node": "^8.10.22",
    "@types/priorityqueuejs": "^1.0.1",
    "@types/semaphore": "^1.1.0",
    "@types/sinon": "^4.3.3",
    "@types/tunnel": "^0.0.0",
    "@types/underscore": "^1.8.8",
    "execa": "1.0.0",
    "mocha": "^5.2.0",
    "mocha-junit-reporter": "^1.15.0",
    "mocha-multi-reporters": "^1.1.6",
    "prettier": "^1.14.0",
    "requirejs": "^2.3.5",
    "sinon": "^5.1.1",
    "ts-node": "^6.2.0",
    "tslint": "5.11.0",
    "tslint-config-prettier": "^1.14.0",
    "typedoc": "0.13.0",
    "typescript": "3.1.4",
    "webpack": "^4.16.3",
    "webpack-cli": "^3.2.3"
  },
  "engine": {
    "node": ">=6.0.0"
  },
  "homepage": "https://github.com/Azure/azure-cosmos-js#readme",
  "keywords": [
    "azure",
    "cloud",
    "cosmos db",
    "cosmosdb",
    "database",
    "document database",
    "documentdb",
    "nosql"
  ],
  "license": "MIT",
  "main": "./lib/src/index.js",
  "name": "@azure/cosmos",
  "optionalDependencies": {},
  "readme": "# Microsoft Azure Cosmos JavaScript SDK\n\nThis project provides JavaScript & Node.js SDK library for [SQL API](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-sql-query) of [Azure Cosmos\nDatabase Service](https://azure.microsoft.com/en-us/services/cosmos-db/). This project also includes samples, tools, and utilities.\n\n[![latest npm badge](https://img.shields.io/npm/v/%40azure%2Fcosmos/latest.svg)](https://www.npmjs.com/package/@azure/cosmos) [![Build Status](https://travis-ci.org/Azure/azure-cosmos-js.svg?branch=master)](https://travis-ci.org/Azure/azure-cosmos-js) [![Build Status](https://cosmos-db-sdk-public.visualstudio.com/cosmos-db-sdk-public/_apis/build/status/azure-cosmos-js-Emulator?branchName=master)](https://cosmos-db-sdk-public.visualstudio.com/cosmos-db-sdk-public/_build/latest?definitionId=1&branchName=master)\n\n```js\n// JavaScript\nconst cosmos = require(\"@azure/cosmos\");\nconst CosmosClient = cosmos.CosmosClient;\n\nconst endpoint = \"[hostendpoint]\"; // Add your endpoint\nconst masterKey = \"[database account masterkey]\"; // Add the masterkey of the endpoint\nconst client = new CosmosClient({ endpoint, auth: { masterKey } });\n\nconst databaseDefinition = { id: \"sample database\" };\nconst collectionDefinition = { id: \"sample collection\" };\nconst documentDefinition = { id: \"hello world doc\", content: \"Hello World!\" };\n\nasync function helloCosmos() {\n  const { database: db } = await client.databases.create(databaseDefinition);\n  console.log(\"created db\");\n\n  const { container } = await db.containers.create(collectionDefinition);\n  console.log(\"created collection\");\n\n  const { body } = await container.items.create(documentDefinition);\n  console.log(\"Created item with content: \", body.content);\n\n  await db.delete();\n  console.log(\"Deleted database\");\n}\n\nhelloCosmos().catch(err => {\n  console.error(err);\n});\n```\n\n## Useful links\n\n- [Welcome to Azure Cosmos DB](https://docs.microsoft.com/en-us/azure/cosmos-db/community)\n- [Quick start](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-nodejs-get-started)\n- [Tutorial](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-nodejs-application)\n- [Samples](https://github.com/Azure/azure-cosmos-js/tree/master/samples)\n- [Introduction to Resource Model of Azure Cosmos DB Service](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-resources)\n- [Introduction to SQL API of Azure Cosmos DB Service](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-sql-query)\n- [Partitioning](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-partition-data)\n- [API Documentation](https://docs.microsoft.com/en-us/javascript/api/%40azure/cosmos/?view=azure-node-latest)\n\n## Need Help?\n\nTweet us with #CosmosDB and we'll respond on Twitter. Be sure to check out the Microsoft Azure [Developer Forums on MSDN](https://social.msdn.microsoft.com/forums/azure/en-US/home?forum=AzureDocument) or the [Developer Forums on Stack Overflow](https://stackoverflow.com/questions/tagged/azure-cosmosdb) if you have trouble with the provided code.\n\n## Contribute Code or Provide Feedback\n\nFor our rules and guidelines on contributing, please see [Microsoft's contributor guide].(https://docs.microsoft.com/en-us/contribute/).\n\nFor information on how build and test this repo, please see [./dev.md](./dev.md).\n\nIf you encounter any bugs with the library please file an issue in the [Issues](https://github.com/Azure/azure-cosmos-js/issues) section of the project.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Azure/azure-cosmos-js.git"
  },
  "scripts": {
    "build": "npm run clean && npm run check-format && npm run lint && npm run compile && npm run docs && npm run webpack",
    "build-prod": "npm run clean && npm run check-format && npm run lint && npm run compile-prod && npm run docs && npm run webpack-prod",
    "check-format": "prettier --list-different --config .prettierrc.json \"src/**/*.ts\"",
    "ci": "npm run build && npm run test && node ts-test.js",
    "clean": "rimraf lib",
    "compile": "echo Using TypeScript && tsc --version && tsc --pretty",
    "compile-prod": "echo Using TypeScript && tsc --version && tsc -p tsconfig.prod.json --pretty",
    "docs": "typedoc --excludePrivate --exclude \"**/test/**\" --mode file --out ./lib/docs ./src",
    "format": "prettier --write --config .prettierrc.json \"src/**/*.ts\"",
    "lint": "tslint --project tsconfig.json",
    "prepack": "npm install && npm run build",
    "test": "mocha -r ./src/test/common/setup.ts ./lib/src/test/ --recursive --timeout 100000 -i -g .*ignore.js",
    "test-ts": "mocha -r ts-node/register -r ./src/test/common/setup.ts ./src/test/**/*.spec.ts --recursive --timeout 100000 -i -g .*ignore.js",
    "webpack": "webpack -d",
    "webpack-prod": "webpack -p"
  },
  "types": "./lib/src/index.d.ts",
  "version": "2.1.5"
}
